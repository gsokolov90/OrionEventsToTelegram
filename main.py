import threading
import logging
from aiosmtpd.controller import Controller
from aiosmtpd.handlers import Message
from email.message import EmailMessage
import telebot
import re
from colorama import init, Fore, Back, Style
from datetime import datetime
import os
from dotenv import load_dotenv
from config import get_telegram_token, get_authorized_users_file, get_user_filters_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if os.name == 'nt':  # Windows
    import locale
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ Windows
    os.system('chcp 65001 > nul 2>&1')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏
    os.system('OrionEventsToTelegram - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –£–†–í')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = get_telegram_token()
AUTHORIZED_USERS_FILE = get_authorized_users_file()
USER_FILTERS_FILE = get_user_filters_file()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
class ColoredFormatter(logging.Formatter):
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if record.levelno == logging.ERROR:
            color = Fore.RED
        elif record.levelno == logging.WARNING:
            color = Fore.YELLOW
        elif record.levelno == logging.INFO:
            color = Fore.GREEN
        elif record.levelno == logging.DEBUG:
            color = Fore.CYAN
        else:
            color = Fore.WHITE
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
        record.msg = f"{color}{record.msg}{Style.RESET_ALL}"
        return super().format(record)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
for handler in logging.root.handlers:
    handler.setFormatter(ColoredFormatter('%(asctime)s - %(levelname)s - %(message)s'))

logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"{Fore.GREEN}[INFO] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def log_warning(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    print(f"{Fore.YELLOW}[WARN] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"{Fore.RED}[ERROR] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print(f"{Fore.CYAN}[SUCCESS] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def log_telegram(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–±—ã—Ç–∏–π"""
    print(f"{Fore.MAGENTA}[TELEGRAM] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def log_smtp(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–±—ã—Ç–∏–π"""
    print(f"{Fore.BLUE}[SMTP] {datetime.now().strftime('%H:%M:%S')} - {message}{Style.RESET_ALL}")

def process_string(s):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
    match_time = re.search(r'\b(\d{1,2}:\d{2}):\d{2}\b', s)
    time = match_time.group(1) if match_time else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–í—Ö–æ–¥ –∏–ª–∏ –í—ã—Ö–æ–¥)
    match_direction = re.search(r'—Ä–µ–∂–∏–º:(\S+)', s)
    direction = match_direction.group(1) if match_direction else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    match_employee = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', s)
    employee = match_employee.group(1).strip() if match_employee else ""

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    direction_emojis = {'–í—Ö–æ–¥': '‚öôÔ∏è', '–í—ã—Ö–æ–¥': 'üè°'}
    emoji = direction_emojis.get(direction, 'üö™')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    output = f"üïí {time} | {emoji} {direction} | üë§ {employee}"
    return output

def get_authorized_users():
    try:
        with open(AUTHORIZED_USERS_FILE, 'r') as f:
            users = f.read().splitlines()
            return [int(user_id) for user_id in users]
    except FileNotFoundError:
        return []

def get_user_filters():
    filters = {}
    try:
        with open(USER_FILTERS_FILE, 'r') as f:
            for line in f:
                if ':' in line:
                    user_id, flt = line.strip().split(':', 1)
                    filters[int(user_id)] = flt
    except FileNotFoundError:
        pass
    return filters

def set_user_filter(user_id, flt):
    filters = get_user_filters()
    filters[user_id] = flt
    with open(USER_FILTERS_FILE, 'w') as f:
        for uid, flt in filters.items():
            f.write(f"{uid}:{flt}\n")

def remove_user_filter(user_id):
    filters = get_user_filters()
    if user_id in filters:
        del filters[user_id]
        with open(USER_FILTERS_FILE, 'w') as f:
            for uid, flt in filters.items():
                f.write(f"{uid}:{flt}\n")
        return True
    return False

class SMTPHandler(Message):
    def handle_message(self, message):
        log_smtp("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ email —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.is_multipart():
            body = ''
            for part in message.walk():
                if part.get_content_type() == 'text/plain':
                    charset = part.get_content_charset() or 'utf-8'
                    payload = part.get_payload(decode=True)
                    if isinstance(payload, bytes):
                        body += payload.decode(charset, errors='replace')
                    else:
                        body += str(payload)
        else:
            charset = message.get_content_charset() or 'utf-8'
            payload = message.get_payload(decode=True)
            if isinstance(payload, bytes):
                body = payload.decode(charset, errors='replace')
            else:
                body = str(payload)

        log_smtp(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {body[:100]}...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        msg_text = body

        authorized_users = get_authorized_users()
        user_filters = get_user_filters()
        
        log_info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        for user_id in authorized_users:
            try:
                employee = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', msg_text)
                employee_name = employee.group(1).strip() if employee else ""
                flt = user_filters.get(user_id, None)
                
                if flt:
                    if flt.lower() in employee_name.lower():
                        bot.send_message(user_id, process_string(msg_text))
                        log_success(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Ñ–∏–ª—å—Ç—Ä: {flt})")
                    else:
                        log_info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ñ–∏–ª—å—Ç—Ä: {flt}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name})")
                else:
                    bot.send_message(user_id, process_string(msg_text))
                    log_success(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def start_smtp_server():
    log_info("–ó–∞–ø—É—Å–∫ SMTP —Å–µ—Ä–≤–µ—Ä–∞...")
    handler = SMTPHandler()
    controller = Controller(handler, hostname='127.0.0.1', port=1025)
    controller.start()
    log_success("SMTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 127.0.0.1:1025")
    # –î–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            pass
    except KeyboardInterrupt:
        log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞...")
        controller.stop()
        log_success("SMTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def start_telegram_bot():
    log_info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    @bot.message_handler(commands=['auth'])
    def handle_auth(message):
        log_telegram(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if message.text.strip() == '/auth 68233334':
            user_id = message.from_user.id
            authorized_users = get_authorized_users()
            if user_id not in authorized_users:
                with open(AUTHORIZED_USERS_FILE, 'a') as f:
                    f.write(f"{user_id}\n")
                log_success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            else:
                log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        else:
            log_warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

    @bot.message_handler(commands=['filter'])
    def handle_filter(message):
        log_telegram(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        args = message.text.split(maxsplit=1)
        if len(args) == 2:
            flt = args[1].strip()
            set_user_filter(message.from_user.id, flt)
            log_success(f"–§–∏–ª—å—Ç—Ä '{flt}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, f"–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {flt}")
        else:
            log_warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /filter —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    @bot.message_handler(commands=['unfilter'])
    def handle_unfilter(message):
        log_telegram(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if remove_user_filter(message.from_user.id):
            log_success(f"–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, "–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram
    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        log_telegram(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    log_success("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        log_info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        start_telegram_bot()

def main():
    log_info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OrionEventsToTelegram...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É db –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('db'):
        os.makedirs('db')
        log_success("–ü–∞–ø–∫–∞ db —Å–æ–∑–¥–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(AUTHORIZED_USERS_FILE):
        with open(AUTHORIZED_USERS_FILE, 'w', encoding='utf-8') as f:
            pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        log_success(f"–§–∞–π–ª {AUTHORIZED_USERS_FILE} —Å–æ–∑–¥–∞–Ω")
    
    if not os.path.exists(USER_FILTERS_FILE):
        with open(USER_FILTERS_FILE, 'w', encoding='utf-8') as f:
            pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        log_success(f"–§–∞–π–ª {USER_FILTERS_FILE} —Å–æ–∑–¥–∞–Ω")
    
    smtp_thread = threading.Thread(target=start_smtp_server)
    smtp_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    smtp_thread.start()

    try:
        start_telegram_bot()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    except KeyboardInterrupt:
        log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª CTRL-C (KeyboardInterrupt). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        exit(0)

if __name__ == '__main__':
    main()
