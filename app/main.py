import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
if __name__ == '__main__':
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import threading
import logging
import signal
from aiosmtpd.controller import Controller
from aiosmtpd.handlers import Message
from email.message import EmailMessage
import telebot
import re
from colorama import init, Fore, Style
from datetime import datetime
import time
import requests
import urllib3
from user_manager import UserManager
from database import init_database
from events_database import init_events_database, EventsCleanupScheduler
from config import get_telegram_token, get_logging_level, get_admin_ids, get_users_database_path, get_events_database_path, get_events_retention_days, get_cleanup_enabled, get_cleanup_time, get_logging_backup_logs_count

def get_version():
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª VERSION –≤ —Ç–µ–∫—É—â–µ–π –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        version_paths = ['VERSION', '../VERSION', '../../VERSION']
        for path in version_paths:
            if os.path.exists(path):
                with open(path, 'r', encoding='utf-8') as f:
                    return f.read().strip()
        return "unknown"
    except Exception:
        return "unknown"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if os.name == 'nt':  # Windows
    import locale
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ Windows
    os.system('chcp 65001 > nul 2>&1')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏
    os.system('title OrionEventsToTelegram - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –£–†–í')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = get_telegram_token()
ADMIN_IDS = get_admin_ids()
DATABASE_PATH = get_users_database_path()



# –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
LOGGING_LEVEL = get_logging_level()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ main)
from logger import log_info, log_warning, log_error, log_debug, log_telegram, log_smtp

# –£–¥–∞–ª—è—é –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ bot
# bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
stop_bot = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
events_cleanup_scheduler = None

# –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_user_input, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global stop_bot, events_cleanup_scheduler
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
    if hasattr(signal_handler, 'exit_requested'):
        log_warning("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", module='CORE')
        stop_bot = True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if events_cleanup_scheduler:
            try:
                log_info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...", module='CORE')
                events_cleanup_scheduler.stop()
                log_info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", module='CORE')
            except Exception as e:
                log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", module='CORE')
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        time.sleep(0.5)
        
        log_info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", module='CORE')
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    else:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
        signal_handler.exit_requested = True
        print(f"\n{Fore.YELLOW}[WARN] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!{Style.RESET_ALL}")
        
        # ASCII —Ä–∏—Å—É–Ω–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –±–µ–∑ –±–æ–∫–æ–≤—ã—Ö —Ä–∞–º–æ–∫
        confirmation_art = f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                    ‚ö†Ô∏è  –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–•–û–î–ê  ‚ö†Ô∏è

  –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl-C –µ—â–µ —Ä–∞–∑

  ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
  ‚îÇ                                                          ‚îÇ
  ‚îÇ  [Ctrl-C] ‚îÄ‚îÄ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥                          ‚îÇ
  ‚îÇ                                                          ‚îÇ
  ‚îÇ  [–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫] ‚îÄ‚îÄ‚Üí –û—Ç–º–µ–Ω–∏—Ç—å                           ‚îÇ
  ‚îÇ                                                          ‚îÇ
  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
"""
        print(confirmation_art)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 5 –¥–æ 3)
        def reset_flag():
            time.sleep(3)
            if hasattr(signal_handler, 'exit_requested'):
                delattr(signal_handler, 'exit_requested')
                print(f"\n{Fore.GREEN}[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω{Style.RESET_ALL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
        reset_thread = threading.Thread(target=reset_flag)
        reset_thread.daemon = True
        reset_thread.start()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –º–æ–¥—É–ª—è
MODULE_COLORS = {
    'CORE': Fore.GREEN,
    'Telegram': Fore.MAGENTA,
    'SMTP': Fore.BLUE,
    'UserManager': Fore.CYAN,
    'Database': Fore.BLUE,
    'WARNING': Fore.YELLOW,
    'ERROR': Fore.RED,
    'DEBUG': Fore.CYAN
}

def log_message(level, message, module='CORE'):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è"""
    if level == 'INFO':
        log_info(message, module)
    elif level == 'WARNING':
        log_warning(message, module)
    elif level == 'ERROR':
        log_error(message, module)
    elif level == 'DEBUG':
        log_debug(message, module)

def process_string(s):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
    match_time = re.search(r'\b(\d{1,2}:\d{2}):\d{2}\b', s)
    time = match_time.group(1) if match_time else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–í—Ö–æ–¥ –∏–ª–∏ –í—ã—Ö–æ–¥)
    match_direction = re.search(r'—Ä–µ–∂–∏–º:(\S+)', s)
    direction = match_direction.group(1) if match_direction else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    match_employee = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', s)
    employee = match_employee.group(1).strip() if match_employee else ""

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    direction_emojis = {'–í—Ö–æ–¥': '‚öôÔ∏è', '–í—ã—Ö–æ–¥': 'üè°'}
    emoji = direction_emojis.get(direction, 'üö™')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    output = f"üïí {time} | {emoji} {direction} | üë§ {employee}"
    return output

def get_authorized_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if user_manager is None:
        return set()
    return user_manager.get_authorized_users()

def get_user_filters():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if user_manager is None:
        return {}
    return user_manager.get_user_filters()

def set_user_filter(user_id, flt):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager is None:
        return False
    return user_manager.set_user_filter(user_id, flt)

def remove_user_filter(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager is None:
        return False
    return user_manager.remove_user_filter(user_id)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

class SMTPHandler(Message):
    def __init__(self, bot=None, user_manager=None, events_db=None):
        super().__init__()
        self.bot = bot
        self.user_manager = user_manager
        self.events_db = events_db
    
    def handle_message(self, message):
        log_smtp("üìß –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ email —Å–æ–æ–±—â–µ–Ω–∏–µ")
        log_debug("DEBUG: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMTP —Å–æ–æ–±—â–µ–Ω–∏—è", module='SMTP')
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.is_multipart():
            body = ''
            for part in message.walk():
                if part.get_content_type() == 'text/plain':
                    charset = part.get_content_charset() or 'utf-8'
                    payload = part.get_payload(decode=True)
                    if isinstance(payload, bytes):
                        body += payload.decode(charset, errors='replace')
                    else:
                        body += str(payload)
        else:
            charset = message.get_content_charset() or 'utf-8'
            payload = message.get_payload(decode=True)
            if isinstance(payload, bytes):
                body = payload.decode(charset, errors='replace')
            else:
                body = str(payload)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        employee_match = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', body)
        employee_name = employee_match.group(1).strip() if employee_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        
        log_smtp(f"üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {employee_name}")
        log_debug(f"üìß –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ email: {body}", module='SMTP')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if self.events_db:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                dt_match = re.match(r'(\d{2}\.\d{2}\.\d{4}) (\d{2}:\d{2}:\d{2})', body)
                event_date = dt_match.group(1) if dt_match else None
                event_time = dt_match.group(2) if dt_match else None
                direction_match = re.search(r'—Ä–µ–∂–∏–º:(\S+)', body)
                direction = direction_match.group(1) if direction_match else ""
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                processed_message = process_string(body)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if employee_name and direction and event_date and event_time:
                    from datetime import datetime
                    try:
                        event_timestamp = datetime.strptime(f"{event_date} {event_time}", "%d.%m.%Y %H:%M:%S")
                    except Exception:
                        event_timestamp = datetime.now()
                    success = self.events_db.add_event(
                        employee_name=employee_name,
                        direction=direction,
                        event_timestamp=event_timestamp,
                        raw_message=body,
                        processed_message=processed_message
                    )
                    if success:
                        log_info(f"üíæ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {employee_name} - {direction}", module='EventsDatabase')
                    else:
                        log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {employee_name}", module='EventsDatabase')
                else:
                    log_warning(f"‚ö†Ô∏è  –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫='{employee_name}', –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ='{direction}', –¥–∞—Ç–∞='{event_date}', –≤—Ä–µ–º—è='{event_time}'", module='EventsDatabase')
            except Exception as e:
                log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", module='EventsDatabase')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        msg_text = body
        log_debug("DEBUG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram", module='SMTP')

        if self.user_manager:
            authorized_users = self.user_manager.get_authorized_users()
        else:
            authorized_users = get_authorized_users()
        
        log_info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", module='Telegram')
        log_debug(f"üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {authorized_users}", module='Telegram')
        
        for user_id in authorized_users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if self.user_manager and self.user_manager.should_send_message(user_id, msg_text):
                    if self.bot:
                        self.bot.send_message(user_id, process_string(msg_text))
                        log_info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", module='Telegram')
                    else:
                        log_error(f"–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", module='Telegram')
                else:
                    log_info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", module='Telegram')
                    
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", module='Telegram')

def start_smtp_server(bot=None, user_manager=None, events_db=None):
    log_info("üöÄ –ó–∞–ø—É—Å–∫ SMTP —Å–µ—Ä–≤–µ—Ä–∞...", module='SMTP')
    log_debug("DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMTP —Å–µ—Ä–≤–µ—Ä–∞", module='SMTP')
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ aiosmtpd –µ—Å–ª–∏ –Ω–µ –≤ DEBUG —Ä–µ–∂–∏–º–µ
    if LOGGING_LEVEL != 'DEBUG':
        import logging
        logging.getLogger('aiosmtpd').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.smtp').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.controller').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.handlers').setLevel(logging.ERROR)
    else:
        log_debug("DEBUG: aiosmtpd –ª–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã", module='SMTP')
    
    handler = SMTPHandler(bot, user_manager, events_db)
    controller = Controller(handler, hostname='127.0.0.1', port=1025)
    
    try:
        controller.start()
        log_info("‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1025", module='SMTP')
        # –î–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
    except KeyboardInterrupt:
        log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞...", module='SMTP')
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ SMTP —Å–µ—Ä–≤–µ—Ä–µ: {e}", module='SMTP')
    finally:
        try:
            controller.stop()
            log_info("SMTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", module='SMTP')
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ SMTP —Å–µ—Ä–≤–µ—Ä–∞: {e}", module='SMTP')

def clear_bot_menu(bot):
    """–û—á–∏—â–∞–µ—Ç –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        bot.delete_my_commands()
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
        bot.delete_my_commands(scope=None, language_code=None)
        log_info("üßπ –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é –æ—á–∏—â–µ–Ω–æ", module='Telegram')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ä–≥–µ—Ä –º–µ–Ω—é: {e}", module='Telegram')

def set_authorized_menu(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from telebot.types import BotCommand
        
        commands = [
            BotCommand("report", "üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"),
            BotCommand("filter", "üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–∞–º–∏–ª–∏–∏"),
            BotCommand("unfilter", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"),
            BotCommand("start", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        bot.delete_my_commands()
        bot.delete_my_commands(scope=None, language_code=None)
        
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        bot.set_my_commands(commands, scope=None, language_code=None)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
        for lang_code in ['ru', 'en']:
            try:
                bot.set_my_commands(commands, scope=None, language_code=lang_code)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        
        log_info("‚úÖ –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", module='Telegram')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É—Ä–≥–µ—Ä –º–µ–Ω—é: {e}", module='Telegram')

def start_telegram_bot(bot, user_manager):
    log_info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...", module='Telegram')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    check_telegram_bot(bot)
    
    # –û—á–∏—â–∞–µ–º –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    clear_bot_menu(bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã
    try:
        current_commands = bot.get_my_commands()
        if current_commands:
            log_warning(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã: {[cmd.command for cmd in current_commands]}", module='Telegram')
        else:
            log_info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã", module='Telegram')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥: {e}", module='Telegram')
    
    @bot.message_handler(commands=['start'])
    def handle_start(message):
        user_id = message.from_user.id
        log_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if user_manager.is_authorized(user_id):
            # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            bot.reply_to(message, "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_authorized_menu(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
            try:
                current_commands = bot.get_my_commands()
                log_info(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {[cmd.command for cmd in current_commands]}", module='Telegram')
            except Exception as e:
                log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}", module='Telegram')
        else:
            # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –£–†–í!\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –£–†–í –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            bot.reply_to(message, welcome_text)

    @bot.message_handler(commands=['auth'])
    def handle_auth(message):
        user_id = message.from_user.id
        log_telegram(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_manager.is_authorized(user_id):
            bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        request_id = user_manager.create_auth_request(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            request_text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
        )
        
        if request_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"auth_approve_{request_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"auth_reject_{request_id}")
                    )
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = f"üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
                    user_info += f"ID: {user_id}\n"
                    if message.from_user.username:
                        user_info += f"Username: @{message.from_user.username}\n"
                    if message.from_user.first_name:
                        user_info += f"–ò–º—è: {message.from_user.first_name}\n"
                    if message.from_user.last_name:
                        user_info += f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n"
                    user_info += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    
                    bot.send_message(admin_id, user_info, reply_markup=keyboard)
                    log_info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}", module='Telegram')
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}", module='Telegram')
            
            bot.reply_to(message, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(commands=['filter'])
    def handle_filter(message):
        log_telegram(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        args = message.text.split(maxsplit=1)
        if len(args) == 2:
            flt = args[1].strip()
            set_user_filter(message.from_user.id, flt)
            log_info(f"–§–∏–ª—å—Ç—Ä '{flt}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, f"–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {flt}")
        else:
            log_warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /filter —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    @bot.message_handler(commands=['unfilter'])
    def handle_unfilter(message):
        log_telegram(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if remove_user_filter(message.from_user.id):
            log_info(f"–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞.")

    @bot.message_handler(commands=['add_user'])
    def handle_add_user(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_user 123456789
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        try:
            target_user_id = int(args[1].strip())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_manager is None:
                bot.reply_to(message, "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
                
            if user_manager.add_authorized_user(target_user_id, added_by=user_id):
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                set_authorized_menu(bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
                try:
                    current_commands = bot.get_my_commands()
                    log_info(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {[cmd.command for cmd in current_commands]}", module='Telegram')
                except Exception as e:
                    log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}", module='Telegram')
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", module='Telegram')
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    @bot.message_handler(commands=['update_menu'])
    def handle_update_menu(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            clear_bot_menu(bot)
            set_authorized_menu(bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_commands = bot.get_my_commands()
            command_list = [cmd.command for cmd in current_commands]
            
            bot.reply_to(message, f"‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(command_list)}")
            log_info(f"–ú–µ–Ω—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}", module='Telegram')
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}", module='Telegram')

    @bot.message_handler(commands=['list_users'])
    def handle_list_users(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if user_manager is None:
            bot.reply_to(message, "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
            
        users = user_manager.get_all_users_info()
        if not users:
            bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        response = "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or user['username'] or f"User{user['user_id']}"
            response += f"‚Ä¢ {user['user_id']}: {name}\n"
        
        bot.reply_to(message, response)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('auth_'))
    def handle_auth_callback(call):
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–∞—Ä—Å–∏–º callback data
        parts = call.data.split('_')
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        action = parts[1]  # approve –∏–ª–∏ reject
        request_id = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if user_manager is None:
            bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –î–û –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        target_user_id = user_manager.get_auth_request_user_id(request_id)
        
        approved = (action == 'approve')
        success = user_manager.process_auth_request(request_id, approved, user_id)
        
        if success and target_user_id:
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            notification_text = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é {status_text}!"
            if approved:
                notification_text += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –£–†–í."
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É—Ä–≥–µ—Ä –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                set_authorized_menu(bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
                try:
                    current_commands = bot.get_my_commands()
                    log_info(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {[cmd.command for cmd in current_commands]}", module='Telegram')
                except Exception as e:
                    log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}", module='Telegram')
            bot.send_message(target_user_id, notification_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            status_emoji = "‚úÖ" if approved else "‚ùå"
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            bot.edit_message_text(
                f"{status_emoji} –ó–∞—è–≤–∫–∞ {status_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            
            bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ {status_text}")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

    @bot.message_handler(commands=['report'])
    def handle_report(message):
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report <—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏>")
            return
        surname = args[1].strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from app.config import get_events_database_path
        from app.events_database import EventsDatabaseManager
        db_path = get_events_database_path()
        events_db = EventsDatabaseManager(db_path)
        full_name = get_full_employee_name(events_db, surname)
        
        if not full_name:
            bot.reply_to(message, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ñ–∞–º–∏–ª–∏–µ–π '{surname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"report_period:{surname}:30"),
            InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data=f"report_period:{surname}:90"),
            InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data=f"report_period:{surname}:180")
        )
        bot.reply_to(message, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {full_name}", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('report_period:'))
    def handle_report_period(call):
        try:
            _, surname, days = call.data.split(':')
            days = int(days)
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.")
            return
        bot.answer_callback_query(call.id, "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ë–î —Å–æ–±—ã—Ç–∏–π
        from app.config import get_events_database_path
        from app.events_database import EventsDatabaseManager
        db_path = get_events_database_path()
        events_db = EventsDatabaseManager(db_path)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        full_surname = get_full_employee_name(events_db, surname)
        events = events_db.get_events_by_employee_and_period(full_surname, days)
        if not events:
            bot.send_message(call.message.chat.id, f"–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É '{full_surname}' –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç
        html_content = generate_html_report(events, full_surname, days)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        from datetime import datetime
        events_sorted = sorted(events, key=lambda e: e['event_timestamp'])
        if events_sorted:
            last_event = events_sorted[-1]
            ts = last_event['event_timestamp']
            if isinstance(ts, str):
                try:
                    ts_dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
                except Exception:
                    ts_dt = datetime.fromisoformat(ts)
            else:
                ts_dt = ts
            date_to = ts_dt.date()
        else:
            from datetime import date as dtdate
            date_to = dtdate.today()
        filename = get_report_filename(full_surname, days, date_to)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile('w', delete=False, suffix='.html', encoding='utf-8') as tmp:
            tmp.write(html_content)
            tmp_path = tmp.name
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(tmp_path, 'rb') as f:
            bot.send_document(call.message.chat.id, f, caption=f"–û–¢–ß–ï–¢ –£–†–í –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {full_surname}", visible_file_name=filename)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(tmp_path)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram
    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        log_telegram(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    log_info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω", module='Telegram')
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    log_info("üìß SMTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ localhost:1025", module='SMTP')
    log_info("ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", module='Telegram')
    log_info("üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.", module='CORE')
    log_info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –û–†–ò–û–ù...", module='CORE')
    
    delay = 5  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    global stop_bot
    stop_bot = False
    
    while not stop_bot:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
            bot.infinity_polling(timeout=5, long_polling_timeout=5, skip_pending=True)
        except requests.exceptions.ReadTimeout as e:
            if stop_bot:
                break
            log_warning(f"ReadTimeout: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.", module='Telegram')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            for _ in range(delay):
                if stop_bot:
                    break
                time.sleep(1)
            delay = min(delay * 2, 300)  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        except (requests.exceptions.ConnectTimeout, requests.exceptions.ConnectionError) as e:
            if stop_bot:
                break
            log_warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API: {e}", module='Telegram')
            log_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.telegram.org", module='Telegram')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            for _ in range(delay):
                if stop_bot:
                    break
                time.sleep(1)
            delay = min(delay * 2, 300)
        except (urllib3.exceptions.ConnectTimeoutError, urllib3.exceptions.NameResolutionError) as e:
            if stop_bot:
                break
            log_warning(f"–û—à–∏–±–∫–∞ DNS/—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}", module='Telegram')
            log_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ DNS", module='Telegram')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            for _ in range(delay):
                if stop_bot:
                    break
                time.sleep(1)
            delay = min(delay * 2, 300)
        except KeyboardInterrupt:
            log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ", module='Telegram')
            break
        except Exception as e:
            if stop_bot:
                break
            import traceback
            log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}", module='Telegram')
            if LOGGING_LEVEL == 'DEBUG':
                traceback.print_exc()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            for _ in range(delay):
                if stop_bot:
                    break
                time.sleep(1)
            delay = min(delay * 2, 300)
        else:
            delay = 5  # –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", module='CORE')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN":
        log_error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ config.ini", module='CORE')
        log_error("   –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —Å–µ–∫—Ü–∏—é [Telegram] -> bot_token", module='CORE')
        os._exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not ADMIN_IDS:
        log_warning("‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ config.ini", module='CORE')
        log_warning("   –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏—é [Admins] -> admin_ids", module='CORE')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_dir = os.path.dirname(DATABASE_PATH)
        if not os.path.exists(db_dir):
            os.makedirs(db_dir)
            log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_dir}", module='CORE')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", module='CORE')
        os._exit(1)
    
    log_info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", module='CORE')

def check_smtp_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞"""
    import socket
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 1025 —Å–≤–æ–±–æ–¥–µ–Ω
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(('127.0.0.1', 1025))
        sock.close()
        
        if result == 0:
            log_error("‚ùå –ü–æ—Ä—Ç 1025 —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º", module='SMTP')
            log_error("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç 1025", module='SMTP')
            os._exit(1)
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ SMTP: {e}", module='SMTP')
        os._exit(1)

def check_telegram_bot(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        log_info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API: @{bot_info.username}", module='Telegram')
        return True
    except (requests.exceptions.ConnectTimeout, requests.exceptions.ConnectionError, 
            urllib3.exceptions.ConnectTimeoutError, urllib3.exceptions.NameResolutionError) as e:
        log_warning(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API: {e}", module='Telegram')
        log_info("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ Telegram –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å", module='Telegram')
        log_info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.telegram.org", module='Telegram')
        return False
    except Exception as e:
        log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}", module='Telegram')
        log_error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", module='Telegram')
        return False

def get_full_employee_name(events_db, surname):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ surname
        conn = events_db.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT DISTINCT employee_name 
            FROM events 
            WHERE employee_name LIKE ? 
            ORDER BY employee_name
            LIMIT 1
        """, (f"%{surname}%",))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –ë–î
        else:
            return surname  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}", module='EventsDatabase')
        return surname

def generate_html_report(events, surname, days):
    from datetime import datetime, timedelta, date
    from collections import defaultdict, OrderedDict
    import os
    today = date.today()
    yesterday = today - timedelta(days=1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–∞–ª–∞
    generation_time = datetime.now().strftime('%d.%m.%Y –≤ %H:%M')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ event_timestamp –∫ datetime
    for event in events:
        ts = event['event_timestamp']
        if isinstance(ts, str):
            try:
                ts_dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
            except Exception:
                ts_dt = datetime.fromisoformat(ts)
        else:
            ts_dt = ts
        event['ts_dt'] = ts_dt
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    events_sorted = sorted(events, key=lambda e: e['ts_dt'])
    # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤—Ö–æ–¥-–≤—ã—Ö–æ–¥
    pairs = []
    incomplete_shifts = []  # –î–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å–º–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö –¥–Ω—è—Ö
    i = 0
    n = len(events_sorted)
    while i < n:
        ev = events_sorted[i]
        if ev['direction'].lower() == '–≤—Ö–æ–¥':
            entry = ev
            entry_date = entry['ts_dt'].date()
            # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            exit_ev = None
            for j in range(i+1, n):
                if events_sorted[j]['direction'].lower() == '–≤—ã—Ö–æ–¥':
                    exit_ev = events_sorted[j]
                    break
            if exit_ev:
                # –ü–æ–ª–Ω–∞—è –ø–∞—Ä–∞ –≤—Ö–æ–¥-–≤—ã—Ö–æ–¥
                pairs.append((entry, exit_ev))
                i = events_sorted.index(exit_ev, i+1) + 1
            else:
                # –ù–µ—Ç –≤—ã—Ö–æ–¥–∞
                if entry_date >= yesterday:
                    # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
                    i += 1
                else:
                    # –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –¥–Ω–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–µ–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É
                    incomplete_shifts.append((entry, None))
                    i += 1
        else:
            i += 1
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –¥–∞—Ç–µ –≤—Ö–æ–¥–∞
    day_blocks = OrderedDict()
    total_in = total_out = work_days = 0
    total_work_time = timedelta()
    weekday_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–∞—Ä—ã
    for entry, exit_ev in pairs:
        entry_date = entry['ts_dt'].date()
        if entry_date not in day_blocks:
            day_blocks[entry_date] = {
                'weekday': entry['ts_dt'].weekday(),
                'work_time': timedelta(),
                'events': [],
                'weekday_str': weekday_ru[entry['ts_dt'].weekday()]
            }
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
        day_blocks[entry_date]['events'].append({
            'type': 'in', 
            'time': entry['ts_dt'].strftime('%H:%M')
        })
        total_in += 1
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞
        out_time = exit_ev['ts_dt'].strftime('%H:%M')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–æ–π
        is_night_shift = exit_ev['ts_dt'].date() != entry['ts_dt'].date()
        day_blocks[entry_date]['events'].append({
            'type': 'out', 
            'time': out_time,
            'is_night_shift': is_night_shift
        })
        total_out += 1
        # –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        delta = exit_ev['ts_dt'] - entry['ts_dt']
        if delta.total_seconds() > 0:
            day_blocks[entry_date]['work_time'] += delta
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å–º–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–Ω–µ–π)
    for entry, exit_ev in incomplete_shifts:
        entry_date = entry['ts_dt'].date()
        if entry_date not in day_blocks:
            day_blocks[entry_date] = {
                'weekday': entry['ts_dt'].weekday(),
                'work_time': timedelta(),
                'events': [],
                'weekday_str': weekday_ru[entry['ts_dt'].weekday()]
            }
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π
        day_blocks[entry_date]['events'].append({
            'type': 'in', 
            'time': entry['ts_dt'].strftime('%H:%M')
        })
        total_in += 1
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç –≤—ã—Ö–æ–¥–∞
        day_blocks[entry_date]['events'].append({
            'type': 'no_exit', 
            'time': '–ù–µ—Ç –≤—ã—Ö–æ–¥–∞'
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for d in day_blocks:
        work_time = day_blocks[d]['work_time']
        work_time_str = f"{work_time.seconds//3600}—á {(work_time.seconds%3600)//60}–º" if work_time else "-"
        day_blocks[d]['work_time_str'] = work_time_str
        if work_time_str != '-':
            work_days += 1
            try:
                h, m = [int(x[:-1]) for x in work_time_str.split()]
                total_work_time += timedelta(hours=h, minutes=m)
            except Exception:
                pass
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_dates = sorted(day_blocks.keys(), reverse=True)
    # –î–ª—è –ø–µ—Ä–∏–æ–¥–∞
    if sorted_dates:
        period_start = min(sorted_dates)
        period_end = max(sorted_dates)
    else:
        period_start = period_end = today
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    details = ""
    for d in sorted_dates:
        block = day_blocks[d]
        events_in_block = block['events']
        work_time_str = block['work_time_str']
        weekday = block['weekday_str']
        details += f"<div class='day-block'>"
        details += f"<div class='day-header-row'><div class='day-header'><svg viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M19 3H5C3.89 3 3 3.89 3 5V19C3 20.11 3.89 21 5 21H19C20.11 21 21 20.11 21 19V5C21 3.89 20.11 3 19 3M19 19H5V9H19V19M19 7H5V5H19V7Z' fill='currentColor'/></svg>{d.strftime('%d.%m.%Y')} ({weekday})</div><div class='day-time'>{work_time_str}</div></div>"
        details += "<table class='day-table'><tr><th>–í—Ä–µ–º—è</th><th>–°–æ–±—ã—Ç–∏–µ</th></tr>"
        for ev in events_in_block:
            if ev['type'] == 'in':
                details += f"<tr><td class='time'><span class='time-value'>{ev['time']}</span></td><td class='event-in'><svg width='16' height='16' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z' fill='currentColor'/></svg>–í—Ö–æ–¥</td></tr>"
            elif ev['type'] == 'out':
                night_shift_mark = ""
                if ev.get('is_night_shift', False):
                    night_shift_mark = "<span class='night-shift'>+1</span>"
                details += f"<tr><td class='time'><span class='time-value'>{ev['time']}</span>{night_shift_mark}</td><td class='event-out'><svg width='16' height='16' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z' fill='currentColor'/></svg>–í—ã—Ö–æ–¥</td></tr>"
            elif ev['type'] == 'no_exit':
                details += f"<tr><td class='time'>-</td><td class='event-no-exit'><svg width='16' height='16' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2M12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20M12 6C10.9 6 10 6.9 10 8C10 9.1 10.9 10 12 10C13.1 10 14 9.1 14 8C14 6.9 13.1 6 12 6M12 12C10.9 12 10 12.9 10 14C10 15.1 10.9 16 12 16C13.1 16 14 15.1 14 14C14 12.9 13.1 12 12 12Z' fill='currentColor'/></svg>–ù–µ—Ç –≤—ã—Ö–æ–¥–∞</td></tr>"
        details += "</table></div>"
    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    avg_work_time = total_work_time / work_days if work_days else timedelta()
    avg_hours = int(avg_work_time.total_seconds() // 3600)
    avg_minutes = int((avg_work_time.total_seconds() % 3600) // 60)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å—Ç—Ä–æ–∫–æ–π
    if days == 30:
        period = '1 –º–µ—Å—è—Ü'
    elif days == 90:
        period = '3 –º–µ—Å—è—Ü–∞'
    elif days == 180:
        period = '6 –º–µ—Å—è—Ü–µ–≤'
    else:
        period = f'{days} –¥–Ω–µ–π'
    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    template_path = os.path.join(os.path.dirname(__file__), 'templates', 'report_template.html')
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()
    html = template.replace('{{surname}}', surname)
    html = html.replace('{{period}}', f"{period_start.strftime('%d.%m.%Y')} ‚Äî {period_end.strftime('%d.%m.%Y')}")
    html = html.replace('{{total_in}}', str(total_in))
    html = html.replace('{{total_out}}', str(total_out))
    html = html.replace('{{work_days}}', str(work_days))
    html = html.replace('{{avg_hours}}', str(avg_hours))
    html = html.replace('{{avg_minutes}}', str(avg_minutes))
    html = html.replace('{{details}}', details)
    html = html.replace('{{generation_time}}', generation_time)
    return html

def get_report_filename(surname, days, date_to):
    # date_to ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–µ—Ä–∏–æ–¥–∞ (datetime)
    if days == 30:
        period = '1 –º–µ—Å—è—Ü'
    elif days == 90:
        period = '3 –º–µ—Å—è—Ü–∞'
    elif days == 180:
        period = '6 –º–µ—Å—è—Ü–µ–≤'
    else:
        period = f'{days} –¥–Ω–µ–π'
    safe_surname = surname.replace(' ', '_').replace('.', '.')
    date_str = date_to.strftime('%Y-%m-%d')
    return f"{date_str} {surname} –æ—Ç—á–µ—Ç –£–†–í {period}.html"

def main():
    try:
        print("[DEBUG] Step 1: Starting main function...")
        
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤
        if os.name == 'nt':  # Windows
            print("[DEBUG] Step 2: Windows detected, using simple logger...")
            import logging
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            import os
            log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'log')
            os.makedirs(log_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Windows
            logging.basicConfig(
                level=logging.DEBUG,
                format='%(asctime)s - %(levelname)s - %(message)s',
                handlers=[
                    logging.StreamHandler(),
                    logging.FileHandler(os.path.join(log_dir, 'windows_app.log'), encoding='utf-8')
                ]
            )
            print("[DEBUG] Step 3: Simple Windows logger created")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Windows
            def simple_log_info(message, module='CORE'):
                print(f"[INFO] {module}: {message}")
                logging.info(f"{module}: {message}")
            
            def simple_log_warning(message, module='CORE'):
                print(f"[WARNING] {module}: {message}")
                logging.warning(f"{module}: {message}")
            
            def simple_log_error(message, module='CORE'):
                print(f"[ERROR] {module}: {message}")
                logging.error(f"{module}: {message}")
            
            def simple_log_debug(message, module='CORE'):
                print(f"[DEBUG] {module}: {message}")
                logging.debug(f"{module}: {message}")
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            global log_info, log_warning, log_error, log_debug
            log_info = simple_log_info
            log_warning = simple_log_warning
            log_error = simple_log_error
            log_debug = simple_log_debug
            
            print("[DEBUG] Step 4: Windows logging functions created")
        else:
            # –î–ª—è Unix —Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            print("[DEBUG] Step 2: Unix detected, using normal logger...")
            from logger import setup_logger
            print("[DEBUG] Step 3: Logger imported successfully")
            
            print("[DEBUG] Step 4: Setting up logger...")
            setup_logger(LOGGING_LEVEL)
            print("[DEBUG] Step 5: Logger setup completed")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("[DEBUG] Step 6: Getting version...")
        version = get_version()
        print(f"[DEBUG] Step 7: Version = {version}")
        
        # –õ–æ–≥–æ—Ç–∏–ø –±–µ–∑ –±–æ–∫–æ–≤—ã—Ö —Ä–∞–º–æ–∫
        print("[DEBUG] Step 8: Creating logo...")
        logo_art = f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   OrionEventsToTelegram v{version}
  üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –£–†–í ‚Üí Telegram Bot
  üìß SMTP: localhost:1025
  üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {LOGGING_LEVEL}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
"""
        print("[DEBUG] Step 9: Printing logo...")
        print(logo_art)
        print("[DEBUG] Step 10: Logo printed successfully")
        
        print("[DEBUG] Step 11: Calling log_info...")
        log_info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OrionEventsToTelegram...", module='CORE')
        print("[DEBUG] Step 12: log_info completed successfully")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥—É–ª–µ–π
        check_configuration()
        check_smtp_server()
    
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        telegram_available = check_telegram_bot(bot)
        if not telegram_available:
            log_warning("Telegram –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", module='CORE')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        log_info("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", module='CORE')
        db = init_database(DATABASE_PATH)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
        global user_manager
        user_manager = UserManager(db)
        log_info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", module='CORE')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        events_db_path = get_events_database_path()
        events_retention_days = get_events_retention_days()
        cleanup_enabled = get_cleanup_enabled()
        cleanup_time = get_cleanup_time()

        log_info(f"üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {events_db_path}", module='CORE')
        events_db = init_events_database(events_db_path)
        log_info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", module='CORE')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
        stats = events_db.get_statistics()
        log_info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']} –∑–∞–ø–∏—Å–µ–π, {stats['unique_employees']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", module='CORE')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        global events_cleanup_scheduler
        if cleanup_enabled:
            log_info(f"üßπ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π (–≤—Ä–µ–º—è: {cleanup_time})", module='CORE')
            events_cleanup_scheduler = EventsCleanupScheduler(events_db, events_retention_days, cleanup_time, cleanup_enabled)
            events_cleanup_scheduler.start()
            log_info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω", module='CORE')
        else:
            log_info("üßπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", module='CORE')
            events_cleanup_scheduler = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º SMTP —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–æ—Ç–∞, user_manager –∏ events_db
        smtp_thread = threading.Thread(target=start_smtp_server, args=(bot, user_manager, events_db))
        smtp_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        smtp_thread.start()

        # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞
            time.sleep(1)
            
            start_telegram_bot(bot, user_manager)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        except KeyboardInterrupt:
            log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª CTRL-C (KeyboardInterrupt). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", module='CORE')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
            global stop_bot
            stop_bot = True
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            if events_cleanup_scheduler:
                try:
                    log_info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...", module='CORE')
                    events_cleanup_scheduler.stop()
                    log_info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", module='CORE')
                except Exception as e:
                    log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", module='CORE')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            time.sleep(0.5)
            
            log_info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", module='CORE')
            os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        
    except Exception as e:
        print(f"\n{Fore.RED}[CRITICAL ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}{Style.RESET_ALL}")
        print(f"{Fore.RED}[CRITICAL ERROR] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}{Style.RESET_ALL}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ traceback –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            import traceback
            print(f"\n{Fore.YELLOW}[TRACEBACK]{Style.RESET_ALL}")
            traceback.print_exc()
        except:
            pass
        
        print(f"\n{Fore.RED}–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Style.RESET_ALL}")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        os._exit(1)

if __name__ == '__main__':
    main()
