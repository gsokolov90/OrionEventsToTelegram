import threading
import logging
import signal
from aiosmtpd.controller import Controller
from aiosmtpd.handlers import Message
from email.message import EmailMessage
import telebot
import re
from colorama import init, Fore, Back, Style
from datetime import datetime
import os
from config import get_telegram_token, get_authorized_users_file, get_user_filters_file, get_logging_level, get_admin_ids, get_database_path, get_logging_backup_logs_count
import time
import requests
from user_manager import UserManager
from database import init_database

def get_version():
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
    try:
        with open('VERSION', 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "unknown"
    except Exception:
        return "unknown"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if os.name == 'nt':  # Windows
    import locale
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ Windows
    os.system('chcp 65001 > nul 2>&1')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏
    os.system('OrionEventsToTelegram - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –£–†–í')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = get_telegram_token()
ADMIN_IDS = get_admin_ids()
DATABASE_PATH = get_database_path()

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏)
try:
    AUTHORIZED_USERS_FILE = get_authorized_users_file()
    USER_FILTERS_FILE = get_user_filters_file()
except RuntimeError:
    AUTHORIZED_USERS_FILE = "db/authorized_users.txt"
    USER_FILTERS_FILE = "db/user_filters.txt"

# –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
LOGGING_LEVEL = get_logging_level()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from logger import setup_logger
logger_instance = setup_logger(LOGGING_LEVEL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ logger.py

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ logger.py

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from logger import get_logger
logger = get_logger(__name__)

# –£–¥–∞–ª—è—é –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ bot
# bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
stop_bot = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = None

# –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_user_input, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global stop_bot
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
    if hasattr(signal_handler, 'exit_requested'):
        log_warning("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", module='CORE')
        stop_bot = True
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        try:
            # bot.stop_polling() # –£–¥–∞–ª–µ–Ω–æ
            pass
        except:
            pass
        log_info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", module='CORE')
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    else:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
        signal_handler.exit_requested = True
        print(f"\n{Fore.YELLOW}[WARN] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!{Style.RESET_ALL}")
        
        # ASCII —Ä–∏—Å—É–Ω–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –±–µ–∑ –±–æ–∫–æ–≤—ã—Ö —Ä–∞–º–æ–∫
        confirmation_art = f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                    ‚ö†Ô∏è  –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–•–û–î–ê  ‚ö†Ô∏è

  –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl-C –µ—â–µ —Ä–∞–∑

  ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
  ‚îÇ                                                          ‚îÇ
  ‚îÇ  [Ctrl-C] ‚îÄ‚îÄ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥                          ‚îÇ
  ‚îÇ                                                          ‚îÇ
  ‚îÇ  [–û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫] ‚îÄ‚îÄ‚Üí –û—Ç–º–µ–Ω–∏—Ç—å                           ‚îÇ
  ‚îÇ                                                          ‚îÇ
  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
"""
        print(confirmation_art)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        def reset_flag():
            time.sleep(5)
            if hasattr(signal_handler, 'exit_requested'):
                delattr(signal_handler, 'exit_requested')
                print(f"\n{Fore.GREEN}[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω{Style.RESET_ALL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
        reset_thread = threading.Thread(target=reset_flag)
        reset_thread.daemon = True
        reset_thread.start()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –º–æ–¥—É–ª—è
MODULE_COLORS = {
    'CORE': Fore.GREEN,
    'Telegram': Fore.MAGENTA,
    'SMTP': Fore.BLUE,
    'UserManager': Fore.CYAN,
    'Database': Fore.BLUE,
    'WARNING': Fore.YELLOW,
    'ERROR': Fore.RED,
    'DEBUG': Fore.CYAN
}

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
from logger import log_info, log_warning, log_error, log_debug, log_telegram, log_smtp

def log_message(level, message, module='CORE'):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è"""
    if level == 'INFO':
        log_info(message, module)
    elif level == 'WARNING':
        log_warning(message, module)
    elif level == 'ERROR':
        log_error(message, module)
    elif level == 'DEBUG':
        log_debug(message, module)

def process_string(s):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
    match_time = re.search(r'\b(\d{1,2}:\d{2}):\d{2}\b', s)
    time = match_time.group(1) if match_time else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–í—Ö–æ–¥ –∏–ª–∏ –í—ã—Ö–æ–¥)
    match_direction = re.search(r'—Ä–µ–∂–∏–º:(\S+)', s)
    direction = match_direction.group(1) if match_direction else ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    match_employee = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', s)
    employee = match_employee.group(1).strip() if match_employee else ""

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    direction_emojis = {'–í—Ö–æ–¥': '‚öôÔ∏è', '–í—ã—Ö–æ–¥': 'üè°'}
    emoji = direction_emojis.get(direction, 'üö™')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    output = f"üïí {time} | {emoji} {direction} | üë§ {employee}"
    return output

def get_authorized_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if user_manager is None:
        return set()
    return user_manager.get_authorized_users()

def get_user_filters():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if user_manager is None:
        return {}
    return user_manager.get_user_filters()

def set_user_filter(user_id, flt):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager is None:
        return False
    return user_manager.set_user_filter(user_id, flt)

def remove_user_filter(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager is None:
        return False
    return user_manager.remove_user_filter(user_id)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

class SMTPHandler(Message):
    def __init__(self, bot=None, user_manager=None):
        super().__init__()
        self.bot = bot
        self.user_manager = user_manager
    
    def handle_message(self, message):
        log_smtp("üìß –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ email —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.is_multipart():
            body = ''
            for part in message.walk():
                if part.get_content_type() == 'text/plain':
                    charset = part.get_content_charset() or 'utf-8'
                    payload = part.get_payload(decode=True)
                    if isinstance(payload, bytes):
                        body += payload.decode(charset, errors='replace')
                    else:
                        body += str(payload)
        else:
            charset = message.get_content_charset() or 'utf-8'
            payload = message.get_payload(decode=True)
            if isinstance(payload, bytes):
                body = payload.decode(charset, errors='replace')
            else:
                body = str(payload)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        employee_match = re.search(r'–°–æ—Ç—Ä—É–¥–Ω–∏–∫:(.+)', body)
        employee_name = employee_match.group(1).strip() if employee_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        
        log_smtp(f"üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {employee_name}")
        log_debug(f"üìß –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ email: {body}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        msg_text = body

        if self.user_manager:
            authorized_users = self.user_manager.get_authorized_users()
        else:
            authorized_users = get_authorized_users()
        
        log_info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", module='Telegram')
        log_debug(f"üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {authorized_users}", module='Telegram')
        
        for user_id in authorized_users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if self.user_manager and self.user_manager.should_send_message(user_id, msg_text):
                    if self.bot:
                        self.bot.send_message(user_id, process_string(msg_text))
                        log_info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", module='Telegram')
                    else:
                        log_error(f"–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", module='Telegram')
                else:
                    log_info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", module='Telegram')
                    
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", module='Telegram')

def start_smtp_server(bot=None, user_manager=None):
    log_info("üöÄ –ó–∞–ø—É—Å–∫ SMTP —Å–µ—Ä–≤–µ—Ä–∞...", module='SMTP')
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ aiosmtpd –µ—Å–ª–∏ –Ω–µ –≤ DEBUG —Ä–µ–∂–∏–º–µ
    if LOGGING_LEVEL != 'DEBUG':
        import logging
        logging.getLogger('aiosmtpd').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.smtp').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.controller').setLevel(logging.ERROR)
        logging.getLogger('aiosmtpd.handlers').setLevel(logging.ERROR)
    
    handler = SMTPHandler(bot, user_manager)
    controller = Controller(handler, hostname='127.0.0.1', port=1025)
    controller.start()
    log_info("‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1025", module='SMTP')
    # –î–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
    except KeyboardInterrupt:
        log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞...", module='SMTP')
        controller.stop()
        log_info("SMTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", module='SMTP')

def start_telegram_bot(bot, user_manager):
    log_info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...", module='Telegram')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    check_telegram_bot(bot)
    
    @bot.message_handler(commands=['auth'])
    def handle_auth(message):
        user_id = message.from_user.id
        log_telegram(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_manager.is_authorized(user_id):
            bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        request_id = user_manager.create_auth_request(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            request_text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
        )
        
        if request_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"auth_approve_{request_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"auth_reject_{request_id}")
                    )
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = f"üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
                    user_info += f"ID: {user_id}\n"
                    if message.from_user.username:
                        user_info += f"Username: @{message.from_user.username}\n"
                    if message.from_user.first_name:
                        user_info += f"–ò–º—è: {message.from_user.first_name}\n"
                    if message.from_user.last_name:
                        user_info += f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n"
                    user_info += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    
                    bot.send_message(admin_id, user_info, reply_markup=keyboard)
                    log_info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}", module='Telegram')
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}", module='Telegram')
            
            bot.reply_to(message, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(commands=['filter'])
    def handle_filter(message):
        log_telegram(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        args = message.text.split(maxsplit=1)
        if len(args) == 2:
            flt = args[1].strip()
            set_user_filter(message.from_user.id, flt)
            log_info(f"–§–∏–ª—å—Ç—Ä '{flt}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, f"–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {flt}")
        else:
            log_warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /filter —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    @bot.message_handler(commands=['unfilter'])
    def handle_unfilter(message):
        log_telegram(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if remove_user_filter(message.from_user.id):
            log_info(f"–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", module='Telegram')
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞.")

    @bot.message_handler(commands=['add_user'])
    def handle_add_user(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_user 123456789
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        try:
            target_user_id = int(args[1].strip())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_manager is None:
                bot.reply_to(message, "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
                
            if user_manager.add_authorized_user(target_user_id, added_by=user_id):
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", module='Telegram')
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    @bot.message_handler(commands=['list_users'])
    def handle_list_users(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if user_manager is None:
            bot.reply_to(message, "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
            
        users = user_manager.get_all_users_info()
        if not users:
            bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        response = "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or user['username'] or f"User{user['user_id']}"
            response += f"‚Ä¢ {user['user_id']}: {name}\n"
        
        bot.reply_to(message, response)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('auth_'))
    def handle_auth_callback(call):
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–∞—Ä—Å–∏–º callback data
        parts = call.data.split('_')
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        action = parts[1]  # approve –∏–ª–∏ reject
        request_id = int(parts[2])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if user_manager is None:
            bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –î–û –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        target_user_id = user_manager.get_auth_request_user_id(request_id)
        
        approved = (action == 'approve')
        success = user_manager.process_auth_request(request_id, approved, user_id)
        
        if success and target_user_id:
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            notification_text = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é {status_text}!"
            if approved:
                notification_text += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –£–†–í."
            bot.send_message(target_user_id, notification_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            status_emoji = "‚úÖ" if approved else "‚ùå"
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            bot.edit_message_text(
                f"{status_emoji} –ó–∞—è–≤–∫–∞ {status_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            
            bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ {status_text}")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram
    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        log_telegram(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    log_info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω", module='Telegram')
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    log_info("üìß SMTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ localhost:1025", module='SMTP')
    log_info("ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", module='Telegram')
    log_info("üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.", module='CORE')
    log_info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –û–†–ò–û–ù...", module='CORE')
    
    delay = 5  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    global stop_bot
    stop_bot = False
    
    while not stop_bot:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
            bot.infinity_polling(timeout=10, long_polling_timeout=10, skip_pending=True)
        except requests.exceptions.ReadTimeout as e:
            if stop_bot:
                break
            log_warning(f"ReadTimeout: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.", module='Telegram')
            time.sleep(delay)
            delay = min(delay * 2, 300)  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        except KeyboardInterrupt:
            log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ", module='Telegram')
            break
        except Exception as e:
            if stop_bot:
                break
            import traceback
            log_error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}", module='Telegram')
            traceback.print_exc()
            time.sleep(delay)
            delay = min(delay * 2, 300)
        else:
            delay = 5  # –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", module='CORE')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN":
        log_error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ config.ini", module='CORE')
        log_error("   –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —Å–µ–∫—Ü–∏—é [Telegram] -> bot_token", module='CORE')
        os._exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not ADMIN_IDS:
        log_warning("‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ config.ini", module='CORE')
        log_warning("   –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏—é [Admins] -> admin_ids", module='CORE')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_dir = os.path.dirname(DATABASE_PATH)
        if not os.path.exists(db_dir):
            os.makedirs(db_dir)
            log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_dir}", module='CORE')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", module='CORE')
        os._exit(1)
    
    log_info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", module='CORE')

def check_smtp_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞"""
    import socket
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 1025 —Å–≤–æ–±–æ–¥–µ–Ω
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(('127.0.0.1', 1025))
        sock.close()
        
        if result == 0:
            log_error("‚ùå –ü–æ—Ä—Ç 1025 —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º", module='SMTP')
            log_error("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç 1025", module='SMTP')
            os._exit(1)
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ SMTP: {e}", module='SMTP')
        os._exit(1)

def check_telegram_bot(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        log_info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API: @{bot_info.username}", module='Telegram')
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}", module='Telegram')
        log_error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", module='Telegram')
        os._exit(1)

def main():
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    version = get_version()
    
    # –õ–æ–≥–æ—Ç–∏–ø –±–µ–∑ –±–æ–∫–æ–≤—ã—Ö —Ä–∞–º–æ–∫
    logo_art = f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   OrionEventsToTelegram v{version}
  üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –£–†–í ‚Üí Telegram Bot
  üìß SMTP: localhost:1025
  üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {LOGGING_LEVEL}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
"""
    print(logo_art)
    log_info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OrionEventsToTelegram...", module='CORE')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥—É–ª–µ–π
    check_configuration()
    check_smtp_server()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log_info("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", module='CORE')
    db = init_database(DATABASE_PATH)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
    global user_manager
    user_manager = UserManager(db)
    log_info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", module='CORE')
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º SMTP —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–æ—Ç–∞ –∏ user_manager
    smtp_thread = threading.Thread(target=start_smtp_server, args=(bot, user_manager))
    smtp_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    smtp_thread.start()

    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(1)
        
        start_telegram_bot(bot, user_manager)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    except KeyboardInterrupt:
        log_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª CTRL-C (KeyboardInterrupt). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", module='CORE')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
        global stop_bot
        stop_bot = True
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        # bot.stop_polling()  # bot —Ç–µ–ø–µ—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã–π –≤ start_telegram_bot
        log_info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", module='CORE')
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

if __name__ == '__main__':
    main()
