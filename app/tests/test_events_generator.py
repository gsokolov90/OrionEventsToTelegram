#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è OrionEventsToTelegram
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–º—É–ª—è—Ü–∏–∏ email –∏–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
"""

import sys
import os
import random
import smtplib
from email.message import EmailMessage
from datetime import datetime, timedelta
import sqlite3
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
project_root = os.path.dirname(parent_dir)
sys.path.insert(0, project_root)

from app.config import get_events_database_path
from app.events_database import init_events_database


class EventsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self):
        self.employees = ["–ò–≤–∞–Ω–æ–≤ –ò. –ò.", "–ü–µ—Ç—Ä–æ–≤ –ü. –ü."]
        self.smtp_server = '127.0.0.1'
        self.smtp_port = 1025
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.events_db = init_events_database(get_events_database_path())
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {get_events_database_path()}")
    
    def generate_random_time(self, start_hour=0, end_hour=23):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        hour = random.randint(start_hour, end_hour)
        minute = random.randint(0, 59)
        second = random.randint(0, 59)
        return f"{hour:02d}:{minute:02d}:{second:02d}"
    
    def generate_shift_times(self, base_date):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã"""
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ (00:00-23:59)
        entry_time = self.generate_random_time(0, 23)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã 7-10 —á–∞—Å–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –º–∏–Ω—É—Ç–∞–º–∏
        shift_hours = random.randint(7, 10)
        shift_minutes = random.randint(0, 59)
        shift_duration = timedelta(hours=shift_hours, minutes=shift_minutes)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è datetime –æ–±—ä–µ–∫—Ç–∞
        base_date_only = base_date.date()
        entry_dt = datetime.combine(base_date_only, datetime.strptime(entry_time, "%H:%M:%S").time())
        exit_dt = entry_dt + shift_duration
        
        # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if exit_dt.date() > entry_dt.date():
            exit_date = exit_dt.strftime("%d.%m.%Y")
        else:
            exit_date = base_date.strftime("%d.%m.%Y")
        
        exit_time = exit_dt.strftime("%H:%M:%S")
        
        return {
            'entry': {
                'date': base_date.strftime("%d.%m.%Y"),
                'time': entry_time
            },
            'exit': {
                'date': exit_date,
                'time': exit_time
            }
        }
    
    def check_minimum_rest_period(self, employee, current_date, entry_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞ 12 —á–∞—Å–æ–≤ –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏"""
        try:
            conn = sqlite3.connect(get_events_database_path())
            cursor = conn.cursor()
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cursor.execute("""
                SELECT event_timestamp 
                FROM events 
                WHERE employee_name = ? AND direction = '–í—ã—Ö–æ–¥'
                ORDER BY event_timestamp DESC 
                LIMIT 1
            """, (employee,))
            
            last_exit = cursor.fetchone()
            conn.close()
            
            if last_exit:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞
                last_exit_dt = datetime.fromisoformat(last_exit[0])
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ö–æ–¥–∞
                entry_dt_str = f"{current_date.strftime('%d.%m.%Y')} {entry_time}"
                try:
                    current_entry_dt = datetime.strptime(entry_dt_str, "%d.%m.%Y %H:%M:%S")
                except ValueError:
                    return True  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                time_diff = current_entry_dt - last_exit_dt
                min_rest_hours = 12
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 12 —á–∞—Å–æ–≤
                if time_diff.total_seconds() < min_rest_hours * 3600:
                    return False
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    
    def create_event_message(self, employee, direction, date, time):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–†–ò–û–ù"""
        if direction == "–í—Ö–æ–¥":
            zone = "–£–†–í –ü—Ä–æ—Ö–æ–¥–Ω–∞—è"
        else:
            zone = "–í–Ω–µ—à–Ω–∏–π –º–∏—Ä"
        
        return f"{date} {time} –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å {random.randint(1, 2)}, –ü—Ä–∏–±–æ—Ä 19 –î–≤–µ—Ä—å:–£–†–í –ü—Ä–æ—Ö–æ–¥–Ω–∞—è —Ä–µ–∂–∏–º:{direction} –ó–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞:{zone} –°–æ—Ç—Ä—É–¥–Ω–∏–∫:{employee}"
    
    def check_duplicate_event(self, employee, direction, event_date, event_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ timestamp (—Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã)"""
        try:
            conn = sqlite3.connect(get_events_database_path())
            cursor = conn.cursor()
            dt_str = f"{event_date} {event_time[:5]}"
            try:
                event_dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
            except ValueError:
                event_dt = datetime.now()
            event_dt_iso = event_dt.replace(second=0, microsecond=0).isoformat(sep=' ')
            cursor.execute("""
                SELECT COUNT(*) FROM events 
                WHERE employee_name = ? AND direction = ? AND strftime('%Y-%m-%d %H:%M', event_timestamp) = strftime('%Y-%m-%d %H:%M', ?)
            """, (employee, direction, event_dt_iso))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
            return False
    
    def send_email_event(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SMTP"""
        try:
            msg = EmailMessage()
            msg['Subject'] = '–°–æ–±—ã—Ç–∏–µ –£–†–í'
            msg['From'] = 'orion@company.com'
            msg['To'] = 'events@company.com'
            msg.set_content(message)
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.send_message(msg)
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    def add_event_to_database(self, employee, direction, event_date, event_time, raw_message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (event_date: '–¥–¥.–º–º.–≥–≥–≥–≥', event_time: '—á—á:–º–º:—Å—Å')"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º datetime —Å–æ–±—ã—Ç–∏—è
            dt_str = f"{event_date} {event_time}"
            try:
                event_dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M:%S")
            except ValueError:
                event_dt = datetime.now()
            processed_message = f"üïí {event_time[:5]} | {'‚öôÔ∏è' if direction == '–í—Ö–æ–¥' else 'üè°'} {direction} | üë§ {employee}"
            success = self.events_db.add_event(
                employee_name=employee,
                direction=direction,
                event_timestamp=event_dt,
                raw_message=raw_message,
                processed_message=processed_message
            )
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def clear_all_events(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(get_events_database_path())
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            cursor.execute("SELECT COUNT(*) FROM events")
            count = cursor.fetchone()[0]
            
            if count > 0:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                cursor.execute("DELETE FROM events")
                conn.commit()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            else:
                print("‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —É–∂–µ –ø—É—Å—Ç–∞")
            
            conn.close()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def generate_events(self, days_count, use_email=False):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –Ω–∞ {days_count} –¥–Ω–µ–π...")
        print(f"üìß –†–µ–∂–∏–º: {'Email —ç–º—É–ª—è—Ü–∏—è' if use_email else '–ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É'}")
        print(f"üìÖ –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π (–Ω–µ –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)")
        generated_count = 0
        skipped_count = 0
        duplicate_count = 0
        for day_offset in range(days_count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π (–Ω–∞—á–∏–Ω–∞—è —Å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è)
            current_date = datetime.now() - timedelta(days=day_offset + 1)
            print(f"\nüìÖ –î–µ–Ω—å {day_offset + 1}: {current_date.strftime('%d.%m.%Y')}")
            for employee in self.employees:
                shift_times = self.generate_shift_times(current_date)
                # –°–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
                entry_time = shift_times['entry']['time']
                entry_date = shift_times['entry']['date']
                entry_message = self.create_event_message(employee, "–í—Ö–æ–¥", entry_date, entry_time)
                
                if self.check_duplicate_event(employee, "–í—Ö–æ–¥", entry_date, entry_time):
                    print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞: {employee} - –í—Ö–æ–¥ –≤ {entry_time}")
                    duplicate_count += 1
                else:
                    if use_email:
                        if self.send_email_event(entry_message):
                            print(f"  üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {employee} - –í—Ö–æ–¥ –≤ {entry_time}")
                            generated_count += 1
                        else:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {employee} - –í—Ö–æ–¥")
                    else:
                        if self.add_event_to_database(employee, "–í—Ö–æ–¥", entry_date, entry_time, entry_message):
                            print(f"  üíæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î: {employee} - –í—Ö–æ–¥ –≤ {entry_time}")
                            generated_count += 1
                        else:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {employee} - –í—Ö–æ–¥")
                # –°–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞
                exit_time = shift_times['exit']['time']
                exit_date = shift_times['exit']['date']
                exit_message = self.create_event_message(employee, "–í—ã—Ö–æ–¥", exit_date, exit_time)
                if self.check_duplicate_event(employee, "–í—ã—Ö–æ–¥", exit_date, exit_time):
                    print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞: {employee} - –í—ã—Ö–æ–¥ –≤ {exit_time}")
                    duplicate_count += 1
                else:
                    if use_email:
                        if self.send_email_event(exit_message):
                            print(f"  üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {employee} - –í—ã—Ö–æ–¥ –≤ {exit_time}")
                            generated_count += 1
                        else:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {employee} - –í—ã—Ö–æ–¥")
                    else:
                        if self.add_event_to_database(employee, "–í—ã—Ö–æ–¥", exit_date, exit_time, exit_message):
                            print(f"  üíæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î: {employee} - –í—ã—Ö–æ–¥ –≤ {exit_time}")
                            generated_count += 1
                        else:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {employee} - –í—ã—Ö–æ–¥")
        print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {generated_count}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {generated_count + duplicate_count}")
        if duplicate_count > 0:
            print(f"üí° –°–æ–≤–µ—Ç: –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—á–∏—Å—Ç–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤—ã–±–µ—Ä–∏—Ç–µ 'y' –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π OrionEventsToTelegram")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = EventsGenerator()
    
    # –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    while True:
        clear_input = input("\nüóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π?\n"
                           "y - –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è\n"
                           "n - –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
                           "–í–∞—à –≤—ã–±–æ—Ä (y/n): ").strip().lower()
        
        if clear_input in ['y', 'n']:
            if clear_input == 'y':
                print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
                if generator.clear_all_events():
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    return
            else:
                print("‚ÑπÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            break
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n")
    
    # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    while True:
        try:
            days_input = input("\nüìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ–±—ã—Ç–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (1-30): ").strip()
            days_count = int(days_input)
            if 1 <= days_count <= 30:
                break
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # –ó–∞–ø—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    while True:
        mode_input = input("\nüìß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
                          "1 - –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
                          "2 - –≠–º—É–ª—è—Ü–∏—è email (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP)\n"
                          "–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if mode_input in ['1', '2']:
            use_email = (mode_input == '2')
            break
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generator.generate_events(days_count, use_email)


if __name__ == '__main__':
    main() 