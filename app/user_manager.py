"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""

import os
from typing import Set, Dict, Optional
from .logger import log_info, log_warning, log_error


class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    def __init__(self, authorized_users_file: str, user_filters_file: str):
        self.authorized_users_file = authorized_users_file
        self.user_filters_file = user_filters_file
        self._ensure_files_exist()
    
    def _ensure_files_exist(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É db –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        db_dir = os.path.dirname(self.authorized_users_file)
        if not os.path.exists(db_dir):
            os.makedirs(db_dir)
            log_info(f"üìÅ –ü–∞–ø–∫–∞ {db_dir} —Å–æ–∑–¥–∞–Ω–∞", module='UserManager')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for file_path in [self.authorized_users_file, self.user_filters_file]:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                log_info(f"üìÑ –§–∞–π–ª {file_path} —Å–æ–∑–¥–∞–Ω", module='UserManager')
    
    def get_authorized_users(self) -> Set[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not os.path.exists(self.authorized_users_file):
                return set()
            
            with open(self.authorized_users_file, 'r', encoding='utf-8') as f:
                users = set()
                for line in f:
                    line = line.strip()
                    if line and line.isdigit():
                        users.add(int(line))
                return users
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", module='UserManager')
            return set()
    
    def add_authorized_user(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            authorized_users = self.get_authorized_users()
            if user_id not in authorized_users:
                with open(self.authorized_users_file, 'a', encoding='utf-8') as f:
                    f.write(f"{user_id}\n")
                log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", module='UserManager')
                return True
            else:
                log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", module='UserManager')
                return False
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", module='UserManager')
            return False
    
    def is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.get_authorized_users()
    
    def get_user_filters(self) -> Dict[int, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not os.path.exists(self.user_filters_file):
                return {}
            
            filters = {}
            with open(self.user_filters_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and ':' in line:
                        user_id_str, filter_text = line.split(':', 1)
                        if user_id_str.isdigit():
                            filters[int(user_id_str)] = filter_text.strip()
            return filters
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", module='UserManager')
            return {}
    
    def set_user_filter(self, user_id: int, filter_text: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            filters = self.get_user_filters()
            filters[user_id] = filter_text
            
            with open(self.user_filters_file, 'w', encoding='utf-8') as f:
                for uid, flt in filters.items():
                    f.write(f"{uid}:{flt}\n")
            
            log_info(f"–§–∏–ª—å—Ç—Ä '{filter_text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", module='UserManager')
            return True
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}", module='UserManager')
            return False
    
    def remove_user_filter(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            filters = self.get_user_filters()
            if user_id in filters:
                del filters[user_id]
                
                with open(self.user_filters_file, 'w', encoding='utf-8') as f:
                    for uid, flt in filters.items():
                        f.write(f"{uid}:{flt}\n")
                
                log_info(f"–§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", module='UserManager')
                return True
            else:
                log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", module='UserManager')
                return False
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}", module='UserManager')
            return False
    
    def get_user_filter(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        filters = self.get_user_filters()
        return filters.get(user_id)
    
    def should_send_message(self, user_id: int, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.is_authorized(user_id):
            return False
        
        user_filter = self.get_user_filter(user_id)
        if not user_filter:
            return True  # –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ
        
        return user_filter.lower() in message_text.lower() 