"""
–ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import signal
import socket
import sys
from typing import Optional
from .config import get_telegram_token, get_authorized_users_file, get_user_filters_file, get_logging_level
from .logger import setup_logger, log_info, log_error


class SystemInitializer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.telegram_token = get_telegram_token()
        self.authorized_users_file = get_authorized_users_file()
        self.user_filters_file = get_user_filters_file()
        self.logging_level = get_logging_level()
    
    def setup_windows_encoding(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows"""
        if os.name == 'nt':  # Windows
            import locale
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
            os.environ['PYTHONIOENCODING'] = 'utf-8'
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                locale.setlocale(locale.LC_ALL, 'Russian_Russia.UTF-8')
            except:
                try:
                    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
                except:
                    pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ Windows
            os.system('chcp 65001 > nul 2>&1')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏
            os.system('OrionEventsToTelegram - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –£–†–í')
    
    def setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        setup_logger(self.logging_level)
        log_info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", module='SystemInit')
    
    def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", module='SystemInit')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
        if not self.telegram_token or self.telegram_token == "YOUR_BOT_TOKEN":
            log_error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ config.ini", module='SystemInit')
            log_error("   –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —Å–µ–∫—Ü–∏—é [telegram] -> token", module='SystemInit')
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª—ã
            with open(self.authorized_users_file, 'a') as f:
                f.write("")
            with open(self.user_filters_file, 'a') as f:
                f.write("")
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö: {e}", module='SystemInit')
            return False
        
        log_info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", module='SystemInit')
        return True
    
    def check_smtp_server(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞"""
        log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞...", module='SystemInit')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 1025 —Å–≤–æ–±–æ–¥–µ–Ω
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', 1025))
            sock.close()
            
            if result == 0:
                log_error("‚ùå –ü–æ—Ä—Ç 1025 —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º", module='SystemInit')
                log_error("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç 1025", module='SystemInit')
                return False
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ SMTP: {e}", module='SystemInit')
            return False
        
        log_info("‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", module='SystemInit')
        return True
    
    def check_telegram_bot(self, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...", module='SystemInit')
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = bot.get_me()
            log_info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API: @{bot_info.username}", module='SystemInit')
            return True
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}", module='SystemInit')
            log_error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", module='SystemInit')
            return False
    
    def setup_signal_handlers(self, signal_handler) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        log_info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", module='SystemInit')
    
    def create_directories(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É db –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('db'):
            os.makedirs('db')
            log_info("üìÅ –ü–∞–ø–∫–∞ db —Å–æ–∑–¥–∞–Ω–∞", module='SystemInit')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for file_path in [self.authorized_users_file, self.user_filters_file]:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                log_info(f"üìÑ –§–∞–π–ª {file_path} —Å–æ–∑–¥–∞–Ω", module='SystemInit')
    
    def initialize_system(self, bot) -> bool:
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows
            self.setup_windows_encoding()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            self.setup_logging()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            if not self.check_configuration():
                return False
            
            if not self.check_smtp_server():
                return False
            
            if not self.check_telegram_bot(bot):
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self.create_directories()
            
            log_info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", module='SystemInit')
            return True
            
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}", module='SystemInit')
            return False


def get_version() -> str:
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
    try:
        with open('VERSION', 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "unknown"
    except Exception:
        return "unknown" 