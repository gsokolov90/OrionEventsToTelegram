"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import re
from datetime import datetime
from typing import Optional, Tuple
from .logger import log_debug


class MessageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∏—Å—Ç–µ–º—ã –û–†–ò–û–ù"""
    
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.time_pattern = re.compile(r'(\d{1,2}):(\d{2})')
        self.date_pattern = re.compile(r'(\d{1,2})\.(\d{1,2})\.(\d{4})')
    
    def process_string(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not message:
            return message
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
        time_match = self.time_pattern.search(message)
        if time_match:
            hours, minutes = time_match.groups()
            current_time = datetime.now()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                date_match = self.date_pattern.search(message)
                if date_match:
                    day, month, year = date_match.groups()
                    event_time = datetime(int(year), int(month), int(day), int(hours), int(minutes))
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    event_time = current_time.replace(hour=int(hours), minute=int(minutes))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                formatted_time = event_time.strftime("%H:%M")
                
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                message = self.time_pattern.sub(formatted_time, message)
                
                log_debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ä–µ–º—è: {formatted_time}", module='MessageProcessor')
            except ValueError as e:
                log_debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}", module='MessageProcessor')
        
        return message
    
    def extract_time_info(self, message: str) -> Optional[Tuple[int, int]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã) –∏–ª–∏ None
        """
        time_match = self.time_pattern.search(message)
        if time_match:
            hours, minutes = time_match.groups()
            try:
                return int(hours), int(minutes)
            except ValueError:
                return None
        return None
    
    def format_message_for_telegram(self, original_message: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not original_message:
            return "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        processed_message = self.process_string(original_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_message = f"üîî **–°–æ–±—ã—Ç–∏–µ –û–†–ò–û–ù**\n\n{processed_message}"
        
        return formatted_message
    
    def is_valid_orion_message(self, message: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –û–†–ò–û–ù
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
        """
        if not message:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not self.time_pattern.search(message):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(message.strip()) < 10:
            return False
        
        return True 