"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π SQLite
"""

import os
import sqlite3
import re
from pathlib import Path
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
import threading
import time
try:
    from app.logger import get_logger
    logger = get_logger('EventsDatabase')
    def log_info(message, module='EventsDatabase'):
        logger.info(message)
    def log_error(message, module='EventsDatabase'):
        logger.error(message)
    def log_debug(message, module='EventsDatabase'):
        logger.debug(message)
    def log_warning(message, module='EventsDatabase'):
        logger.warning(message)
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞
    from .logger import get_logger
    logger = get_logger('EventsDatabase')
    def log_info(message, module='EventsDatabase'):
        logger.info(message)
    def log_error(message, module='EventsDatabase'):
        logger.error(message)
    def log_debug(message, module='EventsDatabase'):
        logger.debug(message)
    def log_warning(message, module='EventsDatabase'):
        logger.warning(message)


class EventsDatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_database_exists()
    
    def _ensure_database_exists(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
        # –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç 'app/db', –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É db
        if 'app/db' in self.db_path:
            corrected_path = self.db_path.replace('app/db', 'db')
            log_info(f"üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {self.db_path} ‚Üí {corrected_path}", module='EventsDatabase')
            self.db_path = corrected_path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(self.db_path):
            log_info(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}", module='EventsDatabase')
            log_info("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...", module='EventsDatabase')
        else:
            log_info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}", module='EventsDatabase')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É db –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
            log_info(f"üìÅ –ü–∞–ø–∫–∞ {db_dir} —Å–æ–∑–¥–∞–Ω–∞", module='EventsDatabase')
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
        self._create_tables()
    
    def _create_tables(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        schema = {
            'events': '''
                CREATE TABLE IF NOT EXISTS events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employee_name TEXT NOT NULL,
                    direction TEXT NOT NULL,
                    event_time TEXT NOT NULL,
                    full_time TEXT NOT NULL,
                    raw_message TEXT NOT NULL,
                    processed_message TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            '''
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table_name, create_sql in schema.items():
            try:
                cursor.execute(create_sql)
                log_info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π '{table_name}' –≥–æ—Ç–æ–≤–∞", module='EventsDatabase')
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π '{table_name}': {e}", module='EventsDatabase')
        
        conn.commit()
        conn.close()
        log_info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π {self.db_path} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", module='EventsDatabase')
    
    def get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_path)
    
    def add_event(self, employee_name: str, direction: str, event_time: str, 
                  full_time: str, raw_message: str, processed_message: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO events (employee_name, direction, event_time, full_time, 
                                  raw_message, processed_message)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (employee_name, direction, event_time, full_time, raw_message, processed_message))
            
            conn.commit()
            conn.close()
            
            log_info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {employee_name} - {direction} –≤ {event_time}", module='EventsDatabase')
            return True
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}", module='EventsDatabase')
            return False
    
    def get_events_by_employee(self, employee_name: str, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, employee_name, direction, event_time, full_time, 
                       raw_message, processed_message, created_at
                FROM events 
                WHERE employee_name LIKE ? 
                ORDER BY created_at DESC 
                LIMIT ?
            """, (f"%{employee_name}%", limit))
            
            events = []
            for row in cursor.fetchall():
                events.append({
                    'id': row[0],
                    'employee_name': row[1],
                    'direction': row[2],
                    'event_time': row[3],
                    'full_time': row[4],
                    'raw_message': row[5],
                    'processed_message': row[6],
                    'created_at': row[7]
                })
            
            conn.close()
            return events
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}", module='EventsDatabase')
            return []
    
    def get_events_by_date_range(self, start_date: datetime, end_date: datetime, 
                                limit: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, employee_name, direction, event_time, full_time, 
                       raw_message, processed_message, created_at
                FROM events 
                WHERE created_at BETWEEN ? AND ?
                ORDER BY created_at DESC 
                LIMIT ?
            """, (start_date.isoformat(), end_date.isoformat(), limit))
            
            events = []
            for row in cursor.fetchall():
                events.append({
                    'id': row[0],
                    'employee_name': row[1],
                    'direction': row[2],
                    'event_time': row[3],
                    'full_time': row[4],
                    'raw_message': row[5],
                    'processed_message': row[6],
                    'created_at': row[7]
                })
            
            conn.close()
            return events
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç: {e}", module='EventsDatabase')
            return []
    
    def cleanup_old_events(self, retention_days: int) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–±—ã—Ç–∏–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
            cutoff_date = datetime.now() - timedelta(days=retention_days)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            cursor.execute("""
                SELECT COUNT(*) FROM events 
                WHERE created_at < ?
            """, (cutoff_date.isoformat(),))
            
            count_to_delete = cursor.fetchone()[0]
            
            if count_to_delete > 0:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                cursor.execute("""
                    DELETE FROM events 
                    WHERE created_at < ?
                """, (cutoff_date.isoformat(),))
                
                conn.commit()
                log_info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {count_to_delete} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä—à–µ {retention_days} –¥–Ω–µ–π)", module='EventsDatabase')
            else:
                log_info("‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", module='EventsDatabase')
            
            conn.close()
            return count_to_delete
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}", module='EventsDatabase')
            return 0
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM events")
            total_events = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            cursor.execute("SELECT COUNT(DISTINCT employee_name) FROM events")
            unique_employees = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
            cursor.execute("""
                SELECT direction, COUNT(*) 
                FROM events 
                GROUP BY direction
            """)
            direction_stats = dict(cursor.fetchall())
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
            cursor.execute("""
                SELECT created_at, employee_name, direction 
                FROM events 
                ORDER BY created_at DESC 
                LIMIT 1
            """)
            last_event = cursor.fetchone()
            
            conn.close()
            
            return {
                'total_events': total_events,
                'unique_employees': unique_employees,
                'direction_stats': direction_stats,
                'last_event': {
                    'created_at': last_event[0],
                    'employee_name': last_event[1],
                    'direction': last_event[2]
                } if last_event else None
            }
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}", module='EventsDatabase')
            return {
                'total_events': 0,
                'unique_employees': 0,
                'direction_stats': {},
                'last_event': None
            }
    
    def get_total_events_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM events")
            count = cursor.fetchone()[0]
            
            conn.close()
            return count
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π: {e}", module='EventsDatabase')
            return 0


class EventsCleanupScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, events_db: EventsDatabaseManager, retention_days: int, 
                 cleanup_time: str = "02:00", enabled: bool = True):
        self.events_db = events_db
        self.retention_days = retention_days
        self.cleanup_time = cleanup_time
        self.enabled = enabled
        self.running = False
        self.cleanup_thread = None
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏
        try:
            hour, minute = map(int, cleanup_time.split(':'))
            self.cleanup_hour = hour
            self.cleanup_minute = minute
        except ValueError:
            log_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—á–∏—Å—Ç–∫–∏: {cleanup_time}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 02:00", module='EventsDatabase')
            self.cleanup_hour = 2
            self.cleanup_minute = 0
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        if not self.enabled:
            log_info("üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞", module='EventsDatabase')
            return
        
        self.running = True
        self.cleanup_thread = threading.Thread(target=self._cleanup_loop, daemon=True)
        self.cleanup_thread.start()
        log_info(f"üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω (–≤—Ä–µ–º—è: {self.cleanup_time})", module='EventsDatabase')
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        if not self.running:
            return
            
        log_info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...", module='EventsDatabase')
        self.running = False
        
        if self.cleanup_thread and self.cleanup_thread.is_alive():
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            self.cleanup_thread.join(timeout=3)
            
            if self.cleanup_thread.is_alive():
                log_warning("‚ö†Ô∏è  –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥", module='EventsDatabase')
            else:
                log_info("‚úÖ –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", module='EventsDatabase')
        
        log_info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", module='EventsDatabase')
    
    def _cleanup_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                now = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
                if (now.hour == self.cleanup_hour and 
                    now.minute == self.cleanup_minute):
                    
                    log_info("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π...", module='EventsDatabase')
                    deleted_count = self.events_db.cleanup_old_events(self.retention_days)
                    
                    if deleted_count > 0:
                        log_info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π", module='EventsDatabase')
                    else:
                        log_info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", module='EventsDatabase')
                    
                    # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                    for _ in range(60):
                        if not self.running:
                            break
                        time.sleep(1)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–æ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
                    for _ in range(60):
                        if not self.running:
                            break
                        time.sleep(1)
                    
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏: {e}", module='EventsDatabase')
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                for _ in range(300):
                    if not self.running:
                        break
                    time.sleep(1)


def init_events_database(db_path: str) -> EventsDatabaseManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    return EventsDatabaseManager(db_path) 